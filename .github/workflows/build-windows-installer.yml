name: Build Windows installer (dist + MSI)

on:
  workflow_dispatch: {}

jobs:
  build-dist:
    name: Build distribution (dist)
    runs-on: windows-latest
    outputs:
      build-version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Read package.json version
        id: read_version
        run: |
          $pkg = Get-Content -Path package.json -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
          $ver = if ($pkg -and $pkg.version) { $pkg.version } else { '0.0.0' }
          Write-Host "Package version: $ver"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$ver"
        shell: pwsh

      - name: Prepare dist folder
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-dist.ps1 -ProjectRoot $env:GITHUB_WORKSPACE
        shell: pwsh

      - name: Bundle Windows EXE (pkg)
        run: |
          # Ensure entry point exists (server.js) and produce a Windows exe for distribution
          if (-not (Test-Path server.js)) { Write-Error 'server.js not found; cannot bundle exe'; exit 1 }
          npx pkg server.js --targets node18-win-x64 --output dist\CreoAutomation.exe
        shell: pwsh

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  build-msi:
    name: Build MSI
    needs: build-dist
    runs-on: windows-latest
    env:
      BUILD_VERSION: ${{ needs.build-dist.outputs.build-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Set up WiX
        run: |
          choco install wixtoolset --no-progress -y
        shell: powershell

      - name: Run MSI build
        run: |
          powershell -ExecutionPolicy Bypass -File installer\build-msi.ps1 -Version $env:BUILD_VERSION -SourceDir "$env:GITHUB_WORKSPACE\dist" -OutDir "installer\output"
        shell: powershell

      - name: Upload MSI artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: creo-msi
          path: installer\output\*.msi