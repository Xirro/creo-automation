# Build and publish release asset when a tag is pushed (e.g. v1.0.0)
#
# This workflow runs on Windows since the installer is a Windows executable.
# It checks out the repository, sets up Node, optionally runs `npm run build`,
# and uploads `./dist/CreoAutomationInstaller.exe` to the GitHub Release created for the tag.

name: Build and publish release asset

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if (Test-Path "package.json") { npm ci } else { Write-Host "No package.json found, skipping npm install" }

      - name: Run build (if defined)
        run: |
          # If you have a build script that produces an artifact under ./dist, run it.
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
          if ($pkg -and $pkg.scripts -and $pkg.scripts.build) {
            Write-Host "Found build script, running npm run build"
            npm run build
          } else {
            Write-Host "No build script defined in package.json; skipping build step"
          }

      - name: Prepare distribution folder (build-dist.ps1)
        run: |
          Write-Host "Running scripts\build-dist.ps1 to prepare ./dist"
          powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-dist.ps1 -ProjectRoot $PWD -NodeExe (Get-Command node).Source

      - name: Install Inno Setup (choco)
        run: |
          choco install innosetup -y
        shell: powershell

      - name: Build installer with Inno Setup
        run: |
          $iscc = 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe'
          if (-not (Test-Path $iscc)) {
            Write-Host "ISCC.exe not found at $iscc; attempting to locate with where.exe"
            $found = & where.exe ISCC.exe 2>$null | Select-Object -First 1
            if ($found) { $iscc = $found }
          }
          if (-not (Test-Path $iscc)) { throw "ISCC.exe not found. Inno Setup installation failed or path differs." }
          Write-Host "Using ISCC: $iscc"
          & $iscc 'installer\setup.iss'
        shell: powershell

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            See CHANGELOG.md for release notes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload CreoAutomationInstaller (if present)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist_installer/CreoAutomationInstaller.exe
          asset_name: CreoAutomationInstaller.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify asset presence
        run: |
          if (Test-Path "./dist_installer/CreoAutomationInstaller.exe") {
            Write-Host "CreoAutomationInstaller.exe found in dist_installer and uploaded"
          } else {
            Write-Host "No CreoAutomationInstaller.exe produced. Ensure scripts/build-dist.ps1 and installer/setup.iss produce dist_installer\\CreoAutomationInstaller.exe"
          }
