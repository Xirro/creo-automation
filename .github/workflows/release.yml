# Build and publish release asset when a tag is pushed (e.g. v1.0.0)
#
# This workflow runs on Windows since the installer is a Windows executable.
# It checks out the repository, sets up Node, optionally runs `npm run build`,
# and uploads `./dist/CreoAutomationInstaller.exe` to the GitHub Release created for the tag.

name: Build and publish release asset

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if (Test-Path "package.json") { npm ci } else { Write-Host "No package.json found, skipping npm install" }

      - name: Run build (if defined)
        run: |
          # If you have a build script that produces an artifact under ./dist, run it.
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
          if ($pkg -and $pkg.scripts -and $pkg.scripts.build) {
            Write-Host "Found build script, running npm run build"
            npm run build
          } else {
            Write-Host "No build script defined in package.json; skipping build step"
          }

      - name: Prepare distribution folder (build-dist.ps1)
        run: |
          Write-Host "Running scripts\build-dist.ps1 to prepare ./dist"
          powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\build-dist.ps1 -ProjectRoot $PWD -NodeExe (Get-Command node).Source

      - name: Install Inno Setup (choco)
        run: |
          choco install innosetup -y
        shell: powershell

      - name: Build installer with Inno Setup (versioned)
        id: build-installer
        run: |
          # Determine installer version: prefer the Git tag name (e.g. v0.1.0-beta) when present,
          # otherwise fall back to package.json version.
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
          $pkgVersion = if ($pkg -and $pkg.version) { $pkg.version -replace '\+','-' } else { '' }
          $refName = $env:GITHUB_REF_NAME

          if ($refName -and $refName -match '^v') {
            $installer_version = $refName
            Write-Host "Using Git tag as installer version: $installer_version"
          } elseif ($pkgVersion) {
            $installer_version = $pkgVersion
            Write-Host "Using package.json version as installer version: $installer_version"
          } else {
            throw "Unable to determine installer version from tag or package.json"
          }

          # Create a temporary ISS with versioned OutputBaseFilename
          $origIss = 'installer\setup.iss'
          $tmpIss = "installer\setup_$installer_version.iss"
          $issText = Get-Content $origIss -Raw
          # Replace OutputBaseFilename line (naive replace, expects OutputBaseFilename=CreoAutomationInstaller)
          $issText = $issText -replace 'OutputBaseFilename=CreoAutomationInstaller', "OutputBaseFilename=CreoAutomationInstaller-$installer_version"
          Set-Content -Path $tmpIss -Value $issText -Encoding ASCII

          $iscc = 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe'
          if (-not (Test-Path $iscc)) {
            Write-Host "ISCC.exe not found at $iscc; attempting to locate with where.exe"
            $found = & where.exe ISCC.exe 2>$null | Select-Object -First 1
            if ($found) { $iscc = $found }
          }
          if (-not (Test-Path $iscc)) { throw "ISCC.exe not found. Inno Setup installation failed or path differs." }
          Write-Host "Using ISCC: $iscc"
          & $iscc $tmpIss
          # Expose the version as output for later steps (use GITHUB_OUTPUT file)
          Add-Content -Path $env:GITHUB_OUTPUT -Value "installer_version=$installer_version"
        shell: powershell

      - name: Install GitHub CLI (gh)
        run: |
          choco install gh -y
        shell: powershell

      - name: Create GitHub release and upload asset using gh
        id: gh_release
        run: |
          $tag = $env:GITHUB_REF_NAME
          $version = '${{ steps.build-installer.outputs.installer_version }}'
          Write-Host "Creating release $tag and uploading CreoAutomationInstaller-$version.exe"

          # Authenticate gh using the provided token
          $token = $env:GITHUB_TOKEN
          if (-not $token) { throw 'GITHUB_TOKEN is not set' }
          Write-Output $token | gh auth login --with-token

          # Create the release and upload the single asset (will fail if asset is missing)
          $assetPath = "./dist_installer/CreoAutomationInstaller-$version.exe"
          if (-not (Test-Path $assetPath)) {
            Write-Host "Asset $assetPath not found. Aborting release creation."
            exit 1
          }

          # If the release already exists, upload the asset with --clobber to replace any existing file.
          # Otherwise create the release and attach the asset.
          Write-Host "Checking if release $tag exists"
          gh release view $tag --repo $env:GITHUB_REPOSITORY 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Release $tag exists — uploading asset (will clobber if present)"
            gh release upload $tag $assetPath --clobber --repo $env:GITHUB_REPOSITORY
          } else {
            Write-Host "Release $tag does not exist — creating and uploading asset"
            gh release create $tag $assetPath --title $tag --notes-file CHANGELOG.md --repo $env:GITHUB_REPOSITORY
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify asset presence
        run: |
          $version = '${{ steps.build-installer.outputs.installer_version }}'
          $path = "./dist_installer/CreoAutomationInstaller-$version.exe"
          if (Test-Path $path) {
            Write-Host "Found $path"
          } else {
            Write-Host "No $path produced. Ensure scripts/build-dist.ps1 and installer/setup.iss produce the versioned installer"
            exit 1
          }
